@{
    IDocument containingAssembly = Document.GetDocument(CodeAnalysisKeys.ContainingAssembly);
    IDocument containingNamespace = Document.GetDocument(CodeAnalysisKeys.ContainingNamespace);
    IDocument containingType = Document.GetDocument(CodeAnalysisKeys.ContainingType);
    if (containingAssembly is object || containingNamespace is object || containingType is object)
    {
        <div class="sidebar-root bg-white mb-3 page-box font-size-sm">
            @if (containingAssembly is object)
            {
                <div class="sidebar-nav-item sidebar-header mb-0 pb-0">Assembly</div>
                <div class="sidebar-nav-item font-weight-normal mt-0 pt-0">@Context.GetTypeLink(containingAssembly, false)</div>
            }
            @if (containingNamespace is object)
            {
                <div class="sidebar-nav-item sidebar-header mb-0 pb-0">Namespace</div>
                <div class="sidebar-nav-item  font-weight-normal mt-0 pt-0">@Context.GetTypeLink(containingNamespace, false)</div>
            }
            @if (containingType is object)
            {
                <div class="sidebar-nav-item sidebar-header mb-0 pb-0">Type</div>
                <div class="sidebar-nav-item font-weight-normal mt-0 pt-0">@Context.GetTypeLink(containingType, false)</div>
            }
        </div>
    }

    if(containingType is object)
    {
        IReadOnlyList<IDocument> constructors = containingType
            .GetDocumentList(CodeAnalysisKeys.Constructors)
            .Where(x => x.GetBool(CodeAnalysisKeys.IsResult))
            .ToList();
        if(constructors is object && constructors.Count > 0)
        {
            <div class="sidebar-nav-item sidebar-header">Constructors</div>
            <div class="sidebar-nav-children">
                @foreach(IDocument constructor in constructors)
                {
                    string activeClass = constructor.GetString(CodeAnalysisKeys.SymbolId) == Document.GetString(CodeAnalysisKeys.SymbolId)
                        ? "active"
                        : null;
                    <div class="sidebar-nav-item @activeClass">@Context.GetTypeLink(constructor, false)</div>
                }
            </div>
        }

        foreach(IGrouping<string, IDocument> memberGroup
            in containingType.GetDocumentList(CodeAnalysisKeys.Members)
                .Where(x => x.GetBool(CodeAnalysisKeys.IsResult))
                .GroupBy(x => x.GetString(CodeAnalysisKeys.Kind))
                .OrderBy(x => x.Key))
        {
            <div class="sidebar-nav-item sidebar-header">@memberGroup.Key Members</div>
            <div class="sidebar-nav-children">
                @foreach(IDocument member in memberGroup
                    .OrderBy(x => x.GetString(CodeAnalysisKeys.Name)))
                {
                    string activeClass = member.GetString(CodeAnalysisKeys.SymbolId) == Document.GetString(CodeAnalysisKeys.SymbolId)
                        ? "active"
                        : null;
                    <div class="sidebar-nav-item @activeClass">@Context.GetTypeLink(member, false)</div>
                }
            </div>
        }
    }
}