{"path":"examples/writing","templateID":1,"sharedPropsHashes":{"toc":"Z21KXCh"},"localProps":{"className":"/writing","data":"# Writing\r\n\r\n<h2 class=\"title is-2 has-text-danger\">Injection Warning</h2>\r\n\r\nWhen opening a CSV in an external program, a formula in a field could be ran that contains a vulnerability. Read more here: [Comma Separated Vulnerabilities](https://www.contextis.com/blog/comma-separated-vulnerabilities). Due to this issue, if a field starts with characters `=`, `@`, `+`, or `-`, that field will be prepended with a `\\t`. If the field is quoted, the `\\t` will come after the `\"`.\r\n\r\n`=one` -> `\\t=one`\r\n\r\n`\"=one\"` -> `\"\\t=one\"`\r\n\r\nYou are able to turn this functionality off in configuration.\r\n\r\n```cs\r\ncsv.Configuration.SanitizeForInjection = false;\r\n```\r\n\r\nWhen writing, you can throw an enumerable of class objects, dynamic objects, anonymous type objects, or pretty much anything else, and it will get written.\r\n\r\n### Topics\r\n&nbsp; | &nbsp;\r\n- | -\r\n[Write Class Objects](/examples/writing/write-class-objects) | \r\n[Write Dynamic Objects](/examples/writing/write-dynamic-objects) | \r\n[Write Anonymous Type Objects](/examples/writing/write-anonymous-type-objects) | \r\n"}}
