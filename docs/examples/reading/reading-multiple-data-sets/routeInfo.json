{"path":"examples/reading/reading-multiple-data-sets","templateID":1,"sharedPropsHashes":{"toc":"Z21KXCh"},"localProps":{"className":"/reading-multiple-data-sets","data":"# Reading Multiple Data Sets\r\n\r\nFor some reason there are CSV files out there that contain multiple sets of CSV data in them. You should be able to read files like this without issue. You will need to detect when to change class types you are retreiving.\r\n\r\n###### Data\r\n```\r\nFooId,Name\r\n1,foo\r\n\r\nBarId,Name\r\n07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar\r\n```\r\n\r\n###### Example\r\n\r\n```cs\r\nvoid Main()\r\n{\r\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\r\n    using (var csv = new CsvReader(reader))\r\n    {\r\n\t\tcsv.Configuration.IgnoreBlankLines = false;\r\n\t\tcsv.Configuration.RegisterClassMap<FooMap>();\r\n\t\tcsv.Configuration.RegisterClassMap<BarMap>();\r\n\t\tvar fooRecords = new List<Foo>();\r\n\t\tvar barRecords = new List<Bar>();\r\n\t\tvar isHeader = true;\r\n\t\twhile (csv.Read())\r\n\t\t{\r\n\t\t\tif (isHeader)\r\n\t\t\t{\r\n\t\t\t\tcsv.ReadHeader();\r\n\t\t\t\tisHeader = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (string.IsNullOrEmpty(csv.GetField(0)))\r\n\t\t\t{\r\n\t\t\t\tisHeader = true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (csv.Context.HeaderRecord[0])\r\n\t\t\t{\r\n\t\t\t\tcase \"FooId\":\r\n\t\t\t\t\tfooRecords.Add(csv.GetRecord<Foo>());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"BarId\":\r\n\t\t\t\t\tbarRecords.Add(csv.GetRecord<Bar>());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new InvalidOperationException(\"Unknown record type.\");\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n\r\npublic class Foo\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n}\r\n\r\npublic class Bar\r\n{\r\n\tpublic Guid Id { get; set; }\r\n\tpublic string Name { get; set; }\r\n}\r\n\r\npublic sealed class FooMap : ClassMap<Foo>\r\n{\r\n\tpublic FooMap()\r\n\t{\r\n\t\tMap(m => m.Id).Name(\"FooId\");\r\n\t\tMap(m => m.Name);\r\n\t}\r\n}\r\n\r\npublic sealed class BarMap : ClassMap<Bar>\r\n{\r\n\tpublic BarMap()\r\n\t{\r\n\t\tMap(m => m.Id).Name(\"BarId\");\r\n\t\tMap(m => m.Name);\r\n\t}\r\n}\r\n```\r\n"}}
