{"path":"examples/reading/reading-multiple-record-types","templateID":1,"sharedPropsHashes":{"toc":"Z21KXCh"},"localProps":{"className":"/reading-multiple-record-types","data":"# Reading Multiple Record Types\r\n\r\nIf you have CSV data where each row may be a different record type, you should be able to read based on a row type or something similar.\r\n\r\n###### Data\r\n\r\n```\r\nA,1,foo\r\nB,07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar\r\n```\r\n\r\n###### Example\r\n\r\n```cs\r\nvoid Main()\r\n{\r\n    using (var reader = new StreamReader(\"path\\\\to\\\\file.csv\"))\r\n    using (var csv = new CsvReader(reader))\r\n    {\r\n\t\tcsv.Configuration.HasHeaderRecord = false;\r\n\t\tcsv.Configuration.RegisterClassMap<FooMap>();\r\n\t\tcsv.Configuration.RegisterClassMap<BarMap>();\r\n\t\tvar fooRecords = new List<Foo>();\r\n\t\tvar barRecords = new List<Bar>();\r\n\t\twhile (csv.Read())\r\n\t\t{\r\n\t\t\tswitch (csv.GetField(0))\r\n\t\t\t{\r\n\t\t\t\tcase \"A\":\r\n\t\t\t\t\tfooRecords.Add(csv.GetRecord<Foo>());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"B\":\r\n\t\t\t\t\tbarRecords.Add(csv.GetRecord<Bar>());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new InvalidOperationException(\"Unknown record type.\");\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n\r\npublic class Foo\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; }\r\n}\r\n\r\npublic class Bar\r\n{\r\n\tpublic Guid Id { get; set; }\r\n\tpublic string Name { get; set; }\r\n}\r\n\r\npublic sealed class FooMap : ClassMap<Foo>\r\n{\r\n\tpublic FooMap()\r\n\t{\r\n\t\tMap(m => m.Id).Index(1);\r\n\t\tMap(m => m.Name).Index(2);\r\n\t}\r\n}\r\n\r\npublic sealed class BarMap : ClassMap<Bar>\r\n{\r\n\tpublic BarMap()\r\n\t{\r\n\t\tMap(m => m.Id).Index(1);\r\n\t\tMap(m => m.Name).Index(2);\r\n\t}\r\n}\r\n```\r\n"}}
