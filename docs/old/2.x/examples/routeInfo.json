{"path":"examples","templateID":0,"sharedPropsHashes":{},"localProps":{"className":"examples","data":"# Examples\r\n\r\n- [Private Members](#private-members)\r\n- [Writing Blank Fields](#writing-blank-fields)\r\n\r\n## Private Members\r\n\r\n<hr/>\r\n\r\nIf your class has private members and needs to use constructor parameters instead, you won't be able to use a class map. Instead, the auto mapper will detect this and automatically inject the constructor parameters.\r\n\r\nThe constructor parameter names will be used for the column header names. If there is no header, the position of the parameters will be used instead. You can configure the header matching of the properties.\r\n\r\nIf the class has multiple constructors, the constructor with the most parameters will be chosen. You can configure the constructor selection to choose whatever constructor you like.\r\n\r\n### Headers Match Parameters\r\n\r\n```cs\r\npublic class PrivateMembers\r\n{\r\n\tpublic int Id { get; private set; }\r\n\r\n\tpublic string Name { get; private set; }\r\n\r\n\tpublic PrivateMembers( int Id, string Name )\r\n\t{\r\n\t\tthis.Id = Id;\r\n\t\tthis.Name = Name;\r\n\t}\r\n}\r\n\r\nvar records = csv.GetRecords<PrivateMembers>();\r\n```\r\n\r\n### Header Don't Match Parameters\r\n\r\n```cs\r\npublic class PrivateMembers\r\n{\r\n\tpublic int Id { get; private set; }\r\n\r\n\tpublic string Name { get; private set; }\r\n\r\n\tpublic PrivateMembers( int id, string name )\r\n\t{\r\n\t\tId = id;\r\n\t\tName = name;\r\n\t}\r\n}\r\n\r\n// Change the header matching to match the constructor parameters.\r\ncsv.Configuration.PrepareHeaderForMatch = header =>\r\n\tCultureInfo.CurrentCulture.TextInfo.ToTitleCase( header );\r\n\r\nvar records = csv.GetRecords<PrivateMembers>();\r\n```\r\n\r\n### Choose Alternate Constructor\r\n\r\n```cs\r\npublic class PrivateMembers\r\n{\r\n\tpublic int Id { get; private set; }\r\n\r\n\tpublic string Name { get; private set; }\r\n\r\n\tpublic PrivateMembers( int Id, string Name )\r\n\t{\r\n\t\tId = id;\r\n\t\tName = name;\r\n\t}\r\n\r\n\tpublic PrivateMembers( int a, int b, int c )\r\n\t{\r\n\t\t...\r\n\t}\r\n}\r\n\r\n// Change the selected constructor.\r\ncsv.Configuration.GetConstructor = type =>\r\n\ttype.GetConstructor( new [] { typeof( int ), typeof(string ) } );\r\n\r\nvar records = csv.GetRecords<PrivateMembers>();\r\n```\r\n\r\n## Writing Blank Fields\r\n\r\n<hr/>\r\n\r\nIf you want to write blank fields, you can have a member that is `null` or an empty `string`. If you don't have members for the field, you can map a constant instead.\r\n\r\n```cs\r\nMap( m => m.Id ).Index( 0 );\r\nMap().Index( 1 ).Constant( null );\r\nMap( m => m.Name ).Index( 2 );\r\n```\r\n\r\n<br/>\r\n"}}
