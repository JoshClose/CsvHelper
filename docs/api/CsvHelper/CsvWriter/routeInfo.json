{"path":"api/CsvHelper/CsvWriter","templateID":1,"sharedPropsHashes":{"toc":"Z6psdd"},"localProps":{"className":"/CsvWriter","data":"# CsvWriter Class\r\n\r\nNamespace: [CsvHelper](/api/CsvHelper)\r\n\r\nUsed to write CSV files.\r\n\r\n```cs\r\npublic class CsvWriter : IWriter, IWriterRow, IDisposable\r\n```\r\n\r\nInheritance Object -> CsvWriter\r\n\r\n## Constructors\r\n&nbsp; | &nbsp;\r\n- | -\r\nCsvWriter(TextWriter) | Creates a new CSV writer using the given ``System.IO.TextWriter`` .\r\nCsvWriter(ISerializer) | Creates a new CSV writer using the given ``CsvHelper.ISerializer`` .\r\nCsvWriter(TextWriter, Boolean) | Creates a new CSV writer using the given ``System.IO.TextWriter`` .\r\nCsvWriter(TextWriter, Configuration) | Creates a new CSV writer using the given ``System.IO.TextWriter`` .\r\nCsvWriter(TextWriter, Configuration, Boolean) | Creates a new CSV writer using the given ``System.IO.TextWriter`` .\r\n\r\n## Properties\r\n&nbsp; | &nbsp;\r\n- | -\r\nConfiguration | Gets the configuration.\r\nContext | Gets the writing context.\r\n\r\n## Methods\r\n&nbsp; | &nbsp;\r\n- | -\r\nCanWrite(MemberMap) | Checks if the member can be written.\r\nDispose() | Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\nFlush() | Serializes the row to the ``System.IO.TextWriter`` .\r\nFlushAsync() | Serializes the row to the ``System.IO.TextWriter`` .\r\nGetTypeForRecord&lt;T&gt;(T) | Gets the type for the record. If the generic type is an object due to boxing, it will call GetType() on the record itself.\r\nNextRecord() | Ends writing of the current record and starts a new record. This automatically flushes the writer.\r\nNextRecordAsync() | Ends writing of the current record and starts a new record. This automatically flushes the writer.\r\nWriteComment(String) | Writes a comment.\r\nWriteConvertedField(String) | Writes a field that has already been converted to a ``System.String`` from an ``CsvHelper.TypeConversion.ITypeConverter`` . If the field is null, it won't get written. A type converter will always return a string, even if field is null. If the converter returns a null, it means that the converter has already written data, and the returned value should not be written.\r\nWriteDynamicHeader(IDynamicMetaObjectProvider) | Writes the header record for the given dynamic object.\r\nWriteField(String) | Writes the field to the CSV file. The field may get quotes added to it. When all fields are written for a record, ``CsvHelper.IWriter.NextRecord`` must be called to complete writing of the current record.\r\nWriteField(String, Boolean) | Writes the field to the CSV file. This will ignore any need to quote and ignore ``CsvHelper.Configuration.Configuration.ShouldQuote`` and just quote based on the shouldQuote parameter. When all fields are written for a record, ``CsvHelper.IWriter.NextRecord`` must be called to complete writing of the current record.\r\nWriteField&lt;T&gt;(T) | Writes the field to the CSV file. When all fields are written for a record, ``CsvHelper.IWriter.NextRecord`` must be called to complete writing of the current record.\r\nWriteField&lt;T&gt;(T, ITypeConverter) | Writes the field to the CSV file. When all fields are written for a record, ``CsvHelper.IWriter.NextRecord`` must be called to complete writing of the current record.\r\nWriteField&lt;T, TConverter&gt;(T) | Writes the field to the CSV file using the given ``CsvHelper.TypeConversion.ITypeConverter`` . When all fields are written for a record, ``CsvHelper.IWriter.NextRecord`` must be called to complete writing of the current record.\r\nWriteHeader&lt;T&gt;() | Writes the header record from the given members.\r\nWriteHeader(Type) | Writes the header record from the given members.\r\nWriteRecord&lt;T&gt;(T) | Writes the record to the CSV file.\r\nWriteRecords(IEnumerable) | Writes the list of records to the CSV file.\r\nWriteRecords&lt;T&gt;(IEnumerable&lt;T&gt;) | Writes the list of records to the CSV file.\r\n"}}
